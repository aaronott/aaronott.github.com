<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>nothing special</title>
 <link href="http://a.aronott.com/atom.xml" rel="self"/>
 <link href="http://a.aronott.com"/>
 <updated>2013-03-14T12:41:16-06:00</updated>
 <id>http://a.aronott.com</id>
 <author>
   <name>Aaron Ott</name>
   <email>aaron.ott@gmail.com</email>
 </author>

 
 <entry>
   <title>Hanging with Dano</title>
   <link href="http://a.aronott.com/hanging-with-dano"/>
   <updated>2013-03-03T00:00:00-07:00</updated>
   <id>http://a.aronott.com/hanging-with-dano</id>
   <content type="html">&lt;p&gt;Today I was sitting at a coffee shop chatting with a &lt;a href='http://danomanion.com/'&gt;good friend&lt;/a&gt; about different technologies. We had a great time chatting about Drupal, Markdown and other great techs.&lt;/p&gt;

&lt;p&gt;One of the things we talked about was JavaScript and the different frameworks that are available for it. It seems to me that there may actually be too many choices. With all these choices, which one do I choose?&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve chosen to just learn one and use it a bit and not stress out about which is the &amp;#8220;best&amp;#8221; one to use. So backbone is the one for now. If anyone has any nice tutorials for backbone it would be appreciated. I&amp;#8217;ve gone through a couple and am still lost so I think I&amp;#8217;m missing something.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Getting the repl_lag from your MongoDB Replication set.</title>
   <link href="http://a.aronott.com/MongoDB%20Tools/getting-the-repl_lag-from-your-mongodb-replication-set"/>
   <updated>2013-02-26T00:00:00-07:00</updated>
   <id>http://a.aronott.com/MongoDB%20Tools/getting-the-repl_lag-from-your-mongodb-replication-set</id>
   <content type="html">&lt;p&gt;According to mongodb.org:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Replication lag is a delay between an operation on the primary and the
application of that operation from the oplog to the secondary. &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MongoDB has an eventually consistent model of replication. This is just fine most of the time. Sometimes though, it&amp;#8217;s interesting to find out just how far behind your secondaries are from the primary. This can be done by comparing the optime in the replication status (&lt;code&gt;rs.status()&lt;/code&gt;) output.&lt;/p&gt;

&lt;p&gt;I used to run an rs.status() then grab the optime from the primary and subtract the optime of the secondary node I was interested in. This is a pain and too time consuming. For this reason I wrote the following command that can be run from the mongo commandline.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rs.repl_lag = function () {
  var s = db._adminCommand(&amp;quot;replSetGetStatus&amp;quot;);
 
  // if this is primary, go no further.
  if (s.myState == 1) {
    return 0;
  }
 
  var mytime = 0;
  var primarytime = 0;
 
  for (var i in s.members) {
    if (s.members[i].self == true) {
      mytime = s.members[i].optime.t;
    }
 
    if (s.members[i].stateStr == &amp;quot;PRIMARY&amp;quot;) {
      primarytime = s.members[i].optime.t;
    }
 
    if (mytime &amp;gt; 0 &amp;amp;&amp;amp; primarytime &amp;gt; 0) {
      break;
    }
  }
 
  return (primarytime - mytime) / 1000;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use this, call mongo using the &amp;#8211;shell parameter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongo --shell repl_lag.js&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then from the prompt all you need to type is &lt;code&gt;rs.repl_lag()&lt;/code&gt; and the command returns the number of seconds behind the primary that the current node is. You&amp;#8217;ll notice that if we are on the primary, we simply return 0 since it can&amp;#8217;t be behind itself.&lt;/p&gt;

&lt;p&gt;The script can be downloaded from &lt;a href='https://gist.github.com/aaronott/5045018'&gt;Gist&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Clean up Drupal Users</title>
   <link href="http://a.aronott.com/drupal/clean-up-drupal-users"/>
   <updated>2013-02-11T00:00:00-07:00</updated>
   <id>http://a.aronott.com/drupal/clean-up-drupal-users</id>
   <content type="html">&lt;p&gt;Many times when deploying a Drupal site from your development or staging environment to the production environment, there is the desire to clean things up in order to boost security. One thing that should not be forgotten is the users that are allowed to login to the site. If you have a deployment where everything happens on the development or staging server and is pushed to production, it would be a good idea to not allow any users to login directly to production.&lt;/p&gt;

&lt;p&gt;There are a couple ways to go about this, the first is by logging in as the admin user and manually blocking all users. This method is fine if there are only a few users, but it also becomes tedious and if there are more than a few, very time consuming.&lt;/p&gt;

&lt;p&gt;Another way to do it would be to login to the database and run something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;UPDATE users SET status = 0 WHERE uid &amp;gt; 1;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, this method works just fine, but since we are inside a Drupal instance, we can let Drush do the work for us. I&amp;#8217;ve created a short script that can be used for this purpose and all it does is block every user except the Administrator and Anonymous users. The reason we block the user instead of canceling the user is we might like blog posts to remain tied to the user so they would get credit on the by-line otherwise all content is re-assigned to the Anonymous user.&lt;/p&gt;

&lt;p&gt;This is what the script looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/env drush
&amp;lt;?php
#
# This script removes all drupal users with uid &amp;gt; 1 (e.g., skips
# admin user) and reassigns their content to anonymous.
#

// check if we can bootstrap
$self = drush_sitealias_get_record(&amp;#39;@self&amp;#39;);
if (empty($self)) {
  drush_die(&amp;quot;I can&amp;#39;t bootstrap from the current location.&amp;quot;, 0);
}

// we don&amp;#39;t want to say yes each time.
drush_set_context(&amp;#39;DRUSH_AFFIRMATIVE&amp;#39;, TRUE);

$result = db_query(&amp;quot;SELECT name from {users} WHERE uid &amp;gt; 1&amp;quot;);

foreach ($result as $user) {
  drush_invoke(&amp;#39;user-block&amp;#39;, array($user-&amp;gt;name));
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Download the script from: &lt;a href='https://gist.github.com/aaronott/4760022'&gt;https://gist.github.com/aaronott/4760022&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>workingon   Time tracking</title>
   <link href="http://a.aronott.com/workingon---time-tracking"/>
   <updated>2013-01-18T00:00:00-07:00</updated>
   <id>http://a.aronott.com/workingon---time-tracking</id>
   <content type="html">&lt;p&gt;Since starting with AppliedTrust and sometime before that as well, I&amp;#8217;ve found the need to track time for different projects. I&amp;#8217;ve used a number of methods including pencil and paper, online applications, applications over xmpp that I can connect with through IM even desktop applications.&lt;/p&gt;

&lt;p&gt;One thing I found was that it is super easy to start the timer, then get off onto another project totally forgetting to mark the time when you ended the previous project. This leads to very inaccurate time tracking as you are trying to rely on your memory, &amp;#8220;Hmmm, how long have I been working on this?&amp;#8221;&lt;/p&gt;

&lt;p&gt;I took a script that I&amp;#8217;ve written over and over to learn different languages and wrote it out in PHP real quick. I didn&amp;#8217;t really want to spend much time working on the script it self, really I wasn&amp;#8217;t sure that I&amp;#8217;d even really use it at all. I called WorkingOn and started to use it.&lt;/p&gt;

&lt;p&gt;To start an activity I would simply type in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workingon start &amp;quot;Project X&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this writes a temporary file with a timestamp and the project name so I can keep track of what I&amp;#8217;ve been working on and how long.&lt;/p&gt;

&lt;p&gt;If at anytime I need to see what project I&amp;#8217;m tracking time against I can type in&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workingon current&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and this would return something like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Project X since 10:52:06 [1h13m]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a nice message telling me everything I need to know, what I&amp;#8217;m working on, when I started it and just for ease, how long I&amp;#8217;ve been working on it.&lt;/p&gt;

&lt;p&gt;When I get done I can type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;workingon end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and a message like the following will be displayed&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ended: Project X after 1h15m27s&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I built in a limitation that will allow me to only track a single task at a time. I think this is ideal since you can&amp;#8217;t focus all your energy on more than one project at a time.&lt;/p&gt;

&lt;h3 id='laziness'&gt;Laziness&lt;/h3&gt;

&lt;p&gt;So I ran with this for a while and realized a few things. Number one, I got sick of typing out the full name &lt;code&gt;workingon start&lt;/code&gt; or &lt;code&gt;workingon
current&lt;/code&gt; so I created aliases&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;alias wo=&amp;#39;workingon&amp;#39;
alias woc=&amp;#39;workingon current&amp;#39;
alias wor=&amp;#39;workingon report&amp;#39;
alias wos=&amp;#39;workingon start&amp;#39;
alias woe=&amp;#39;workingon end&amp;#39;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can simply type &lt;code&gt;wos &amp;quot;project X&amp;quot;&lt;/code&gt; and git things started and a quick &lt;code&gt;woc&lt;/code&gt; will tell me what I&amp;#8217;m currently workingon.&lt;/p&gt;

&lt;p&gt;This was progress but another thing I noticed is, like other applications, I would forget to change the clock and would find that I&amp;#8217;d type &lt;code&gt;woc&lt;/code&gt; and it would say I&amp;#8217;d been working on an application for 6hours when really I&amp;#8217;d worked on a number of projects during that time.&lt;/p&gt;

&lt;h3 id='reminders'&gt;Reminders&lt;/h3&gt;

&lt;p&gt;I decided that reminders are a good thing so I built them using cron on my system. I&amp;#8217;m using a linux system so I created a cron to run every 20 minutes and run a script called reminder.sh. This script used notify-send to popup a message that would say &amp;#8220;Hey, what are you workingon?&amp;#8221;&lt;/p&gt;

&lt;p&gt;This worked for a bit but I figured, this could be better, so I added the output from &lt;code&gt;woc&lt;/code&gt; to the script so I could say, you are currently working on Project X for 1h15m.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh

CURRENT=`/usr/local/bin/workingon current`

/usr/bin/notify-send &amp;quot;What are you WorkingOn?&amp;quot; \
  &amp;quot;Check your time.\n $CURRENT&amp;quot; \
  -i /usr/share/pixmaps/gnome-set-time.png&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My cron looks like the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*/20 7-17 * * 1-5 DISPLAY=:0.0 /usr/local/bin/reminder.sh&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='anywhere'&gt;Anywhere&lt;/h3&gt;

&lt;p&gt;So I found that I would be on different computers through out the day and I would like to track my time across them. Easy enough, since the database is simply a flat file, I put it in a dropbox that is connected across my computers so I can now track time on all my devices.&lt;/p&gt;

&lt;p&gt;The full script can be found &lt;a href='https://github.com/aaronott/WorkingOn-CLI'&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this helps someone else as much as it&amp;#8217;s helped me.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Securing ownership of Drupal filesystem.</title>
   <link href="http://a.aronott.com/drupal/securing-ownership-of-drupal-filesystem"/>
   <updated>2013-01-13T00:00:00-07:00</updated>
   <id>http://a.aronott.com/drupal/securing-ownership-of-drupal-filesystem</id>
   <content type="html">&lt;p&gt;There was a security vulnerability found in Drupal 7.0 - 7.15 where a Drupal site could be hijacked given the wrong permissions to the settings.php file. Read more about it here &lt;a href='http://drupal.org/node/1815912'&gt;http://drupal.org/node/1815912&lt;/a&gt; if you are still running Drupal 7.15 or less, upgrade is highly recommended.&lt;/p&gt;

&lt;p&gt;This vulnerability relies on the settings.php file being writable by the web server. One way to ensure that these types of vulnerabilities don&amp;#8217;t effect your site is to set proper permissions to your install.&lt;/p&gt;

&lt;p&gt;On my server, I will normally create a dev group and assign myself and other developers to that group. Then I set the permissions as follows:&lt;/p&gt;

&lt;p&gt;Start with all files :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chown -R nobody:dev /path/to/drupal&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We set the owner to all files to nobody. This is a special user in linux and will ensure that no unnecessary permissions are granted to any of the files in the Drupal install.&lt;/p&gt;

&lt;p&gt;Next we set directory and file permissions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// start with the files
sudo chmod -R 664 /path/to/drupal
// now set the directories
sudo find /path/to/drupal -type d -exec chmod 775 {} \;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just a few final touches to make sure Drupal is happy with how things are set.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// set the sites/default/files directory ownership
// www-data is the owner on most debian based systems,
// if you use a redhat based distro, you may need to set 
// the owner to &amp;#39;apache&amp;#39;
sudo chown -R www-data /path/to/drupal/sites/default/files&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And just for a bit more security let&amp;#8217;s make the settings.php file read-only.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo chmod 444 /path/to/drupal/sites/default/settings.php&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That should do it, permissions should now be set such that anyone in the dev group will be able modify files as needed for development purposes but the webserver will not have permission to modify files leaving the install a bit more secure.&lt;/p&gt;

&lt;p&gt;This whole script can be be downloaded &lt;a href='https://gist.github.com/3908003'&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Library</title>
   <link href="http://a.aronott.com/the-library"/>
   <updated>2013-01-12T00:00:00-07:00</updated>
   <id>http://a.aronott.com/the-library</id>
   <content type="html">&lt;p&gt;Today I&amp;#8217;m at one of my favorite places to be. Though not this particular branch but the Library is one of the greatest places there is. I feel saddened at the prospect that buildings such as this may be extinct in the future and feel that there is hope for these places as well. For the most part, many of the libraries have adapted to the times in allowing for free wifi access to any of its patrons and quite a bit of good quite sitting space.&lt;/p&gt;

&lt;p&gt;I love reading but don&amp;#8217;t read many tree books any longer, most books that I read are the digital version unless I need it for reference. I don&amp;#8217;t use the library as a place to checkout books but more as a place to get things done. At the library you are free to sit without the distraction of cleaning the dishes or that other project around the house that has been sitting rotting to get done. The feeling is liberating really.&lt;/p&gt;

&lt;p&gt;So I sit here for about 3hrs today and am able to work on a few digital projects that I&amp;#8217;ve been trying to get to but have been a bit distracted at home. One of the projects is this page actually so I&amp;#8217;m not wasting any time by writing this up right quick. I&amp;#8217;m still learning this &lt;a href='http://jekyllrb.com/'&gt;Jekyll&lt;/a&gt; thing but am really enjoying each step. With that, it&amp;#8217;s time to get at it.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>DBUG Meetup Notes</title>
   <link href="http://a.aronott.com/DBUG/dbug-meetup-notes"/>
   <updated>2013-01-09T00:00:00-07:00</updated>
   <id>http://a.aronott.com/DBUG/dbug-meetup-notes</id>
   <content type="html">&lt;h2 id='date_20130109'&gt;Date 2013-01-09&lt;/h2&gt;

&lt;h3 id='favorite_modules'&gt;Favorite modules&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Commerce attributes&lt;/li&gt;

&lt;li&gt;Module filter&lt;/li&gt;

&lt;li&gt;Taxonomy roles&lt;/li&gt;

&lt;li&gt;Services module&lt;/li&gt;

&lt;li&gt;Examples module&lt;/li&gt;

&lt;li&gt;Live Reload&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='topic_javascript_in_drupal'&gt;Topic: JavaScript in Drupal&lt;/h2&gt;

&lt;p&gt;by Garrett (killtheliterate)&lt;/p&gt;

&lt;p&gt;RequireJS&lt;/p&gt;

&lt;p&gt;Organizing project in reusable modules is very important. Not seen as much in Drupal with JavaScript.&lt;/p&gt;

&lt;p&gt;Javascript module Things are wrapped in a function&lt;/p&gt;

&lt;p&gt;JavaScript Module can return something back to the Global Namespace.&lt;/p&gt;

&lt;p&gt;Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='http://briancray.com/posts/javascript-module-pattern'&gt;http://briancray.com/posts/javascript-module-pattern&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-in-Depth'&gt;http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-in-Depth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id='asynchronous_module_definition'&gt;Asynchronous Module Definition&lt;/h3&gt;

&lt;p&gt;Don&amp;#8217;t polute the global namespace Javascript loads synchronously which can lead to slower loads.&lt;/p&gt;

&lt;p&gt;Drupal has an issue here, you would need to print out the javascript array and re-weight scripts.&lt;/p&gt;

&lt;p&gt;Debugging becomes easier when modularizing code.&lt;/p&gt;

&lt;p&gt;AMD Links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href='https://github.com/amdjs/amdjs-api/wiki/AMD'&gt;https://github.com/amdjs/amdjs-api/wiki/AMD&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href='http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-in-Depth'&gt;http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-in-Depth&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;AMD is a method not a library.&lt;/p&gt;

&lt;p&gt;Once you have an AMD module you need to be able to load it. RequireJS helps you do this.&lt;/p&gt;

&lt;p&gt;RequireJS:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Encourages modulalr code&lt;/li&gt;

&lt;li&gt;encourages file organization&lt;/li&gt;

&lt;li&gt;leverages AMD&lt;/li&gt;

&lt;li&gt;Offers optimization tools&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rjs - RequireJS optimization tool.&lt;/p&gt;

&lt;h3 id='requirejs__drupal'&gt;RequireJS &amp;amp; Drupal&lt;/h3&gt;

&lt;p&gt;RequireJS is a bit tougher to get into Drupal but it can be done.&lt;/p&gt;

&lt;p&gt;There are a couple threads around adding the JavaScript to Drupal but there isn&amp;#8217;t a large backing.&lt;/p&gt;

&lt;h2 id='open_discussion_happens'&gt;Open discussion happens&lt;/h2&gt;</content>
 </entry>
 
 
</feed>